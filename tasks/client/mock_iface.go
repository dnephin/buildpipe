// Code generated by MockGen. DO NOT EDIT.
// Source: iface.go

// Package client is a generated GoMock package.
package client

import (
	reflect "reflect"

	docker "github.com/fsouza/go-dockerclient"
	gomock "github.com/golang/mock/gomock"
)

// MockDockerClient is a mock of DockerClient interface.
type MockDockerClient struct {
	ctrl     *gomock.Controller
	recorder *MockDockerClientMockRecorder
}

// MockDockerClientMockRecorder is the mock recorder for MockDockerClient.
type MockDockerClientMockRecorder struct {
	mock *MockDockerClient
}

// NewMockDockerClient creates a new mock instance.
func NewMockDockerClient(ctrl *gomock.Controller) *MockDockerClient {
	mock := &MockDockerClient{ctrl: ctrl}
	mock.recorder = &MockDockerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerClient) EXPECT() *MockDockerClientMockRecorder {
	return m.recorder
}

// AttachToContainerNonBlocking mocks base method.
func (m *MockDockerClient) AttachToContainerNonBlocking(arg0 docker.AttachToContainerOptions) (docker.CloseWaiter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachToContainerNonBlocking", arg0)
	ret0, _ := ret[0].(docker.CloseWaiter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachToContainerNonBlocking indicates an expected call of AttachToContainerNonBlocking.
func (mr *MockDockerClientMockRecorder) AttachToContainerNonBlocking(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachToContainerNonBlocking", reflect.TypeOf((*MockDockerClient)(nil).AttachToContainerNonBlocking), arg0)
}

// BuildImage mocks base method.
func (m *MockDockerClient) BuildImage(arg0 docker.BuildImageOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildImage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildImage indicates an expected call of BuildImage.
func (mr *MockDockerClientMockRecorder) BuildImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildImage", reflect.TypeOf((*MockDockerClient)(nil).BuildImage), arg0)
}

// CreateContainer mocks base method.
func (m *MockDockerClient) CreateContainer(arg0 docker.CreateContainerOptions) (*docker.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", arg0)
	ret0, _ := ret[0].(*docker.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockDockerClientMockRecorder) CreateContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockDockerClient)(nil).CreateContainer), arg0)
}

// CreateVolume mocks base method.
func (m *MockDockerClient) CreateVolume(opts docker.CreateVolumeOptions) (*docker.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", opts)
	ret0, _ := ret[0].(*docker.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockDockerClientMockRecorder) CreateVolume(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockDockerClient)(nil).CreateVolume), opts)
}

// DownloadFromContainer mocks base method.
func (m *MockDockerClient) DownloadFromContainer(id string, opts docker.DownloadFromContainerOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFromContainer", id, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFromContainer indicates an expected call of DownloadFromContainer.
func (mr *MockDockerClientMockRecorder) DownloadFromContainer(id, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFromContainer", reflect.TypeOf((*MockDockerClient)(nil).DownloadFromContainer), id, opts)
}

// InspectImage mocks base method.
func (m *MockDockerClient) InspectImage(arg0 string) (*docker.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectImage", arg0)
	ret0, _ := ret[0].(*docker.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectImage indicates an expected call of InspectImage.
func (mr *MockDockerClientMockRecorder) InspectImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectImage", reflect.TypeOf((*MockDockerClient)(nil).InspectImage), arg0)
}

// KillContainer mocks base method.
func (m *MockDockerClient) KillContainer(arg0 docker.KillContainerOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// KillContainer indicates an expected call of KillContainer.
func (mr *MockDockerClientMockRecorder) KillContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillContainer", reflect.TypeOf((*MockDockerClient)(nil).KillContainer), arg0)
}

// PullImage mocks base method.
func (m *MockDockerClient) PullImage(arg0 docker.PullImageOptions, arg1 docker.AuthConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullImage indicates an expected call of PullImage.
func (mr *MockDockerClientMockRecorder) PullImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullImage", reflect.TypeOf((*MockDockerClient)(nil).PullImage), arg0, arg1)
}

// PushImage mocks base method.
func (m *MockDockerClient) PushImage(arg0 docker.PushImageOptions, arg1 docker.AuthConfiguration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushImage indicates an expected call of PushImage.
func (mr *MockDockerClientMockRecorder) PushImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushImage", reflect.TypeOf((*MockDockerClient)(nil).PushImage), arg0, arg1)
}

// RemoveContainer mocks base method.
func (m *MockDockerClient) RemoveContainer(arg0 docker.RemoveContainerOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContainer indicates an expected call of RemoveContainer.
func (mr *MockDockerClientMockRecorder) RemoveContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContainer", reflect.TypeOf((*MockDockerClient)(nil).RemoveContainer), arg0)
}

// RemoveImage mocks base method.
func (m *MockDockerClient) RemoveImage(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveImage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveImage indicates an expected call of RemoveImage.
func (mr *MockDockerClientMockRecorder) RemoveImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveImage", reflect.TypeOf((*MockDockerClient)(nil).RemoveImage), arg0)
}

// RemoveVolume mocks base method.
func (m *MockDockerClient) RemoveVolume(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVolume", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVolume indicates an expected call of RemoveVolume.
func (mr *MockDockerClientMockRecorder) RemoveVolume(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVolume", reflect.TypeOf((*MockDockerClient)(nil).RemoveVolume), name)
}

// ResizeContainerTTY mocks base method.
func (m *MockDockerClient) ResizeContainerTTY(id string, height, width int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeContainerTTY", id, height, width)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResizeContainerTTY indicates an expected call of ResizeContainerTTY.
func (mr *MockDockerClientMockRecorder) ResizeContainerTTY(id, height, width interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeContainerTTY", reflect.TypeOf((*MockDockerClient)(nil).ResizeContainerTTY), id, height, width)
}

// StartContainer mocks base method.
func (m *MockDockerClient) StartContainer(arg0 string, arg1 *docker.HostConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContainer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartContainer indicates an expected call of StartContainer.
func (mr *MockDockerClientMockRecorder) StartContainer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContainer", reflect.TypeOf((*MockDockerClient)(nil).StartContainer), arg0, arg1)
}

// TagImage mocks base method.
func (m *MockDockerClient) TagImage(arg0 string, arg1 docker.TagImageOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagImage indicates an expected call of TagImage.
func (mr *MockDockerClientMockRecorder) TagImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagImage", reflect.TypeOf((*MockDockerClient)(nil).TagImage), arg0, arg1)
}

// WaitContainer mocks base method.
func (m *MockDockerClient) WaitContainer(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitContainer", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitContainer indicates an expected call of WaitContainer.
func (mr *MockDockerClientMockRecorder) WaitContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitContainer", reflect.TypeOf((*MockDockerClient)(nil).WaitContainer), arg0)
}
